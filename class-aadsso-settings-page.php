<?php
/**
 * Settings Page: aadsso-settings-page.php
 *
 * Defines the AADSSO_Settings_Page class, which defines the controls and WordPress hooks used
 * to render the configuration.
 *
 * @package aad-sso-wordpress
 */

/**
 * The class holding all the logic for the 'Azure AD' settings page used to configure the plugin.
 *
 * Partially generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */
class AADSSO_Settings_Page {

	/**
	 * The stored settings (with defaults, if the setting isn't stored).
	 *
	 * @var AADSSO_Settings the Settings Instance responsible for persisting.
	 */
	private $settings;

	/**
	 * The option page's hook_suffix returned from add_options_page
	 *
	 * @var int The id of the options page.  Used to prevent collisions when the options page nae overlaps
	 */
	private $options_page_id;

	/**
	 * Constructs the AADSSO_Settings_Page by connecting its messages and scripts to the
	 * proper WordPress hooks.
	 */
	public function __construct() {

		// Ensure jQuery is loaded.
		add_action( 'admin_enqueue_scripts', array( $this, 'maybe_include_jquery' ) );

		// Add the 'Azure AD' options page.
		add_action( 'admin_menu', array( $this, 'add_options_page' ) );

		// Register the settings.
		add_action( 'admin_init', array( $this, 'register_settings' ) );

		// Reset settings if requested to.
		add_action( 'admin_init', array( $this, 'maybe_reset_settings' ) );

		// Migrate settings if requested to.
		add_action( 'admin_init', array( $this, 'maybe_migrate_settings' ) );

		// If settings were reset, show confirmation.
		add_action( 'all_admin_notices', array( $this, 'notify_if_reset_successful' ) );

		// If settings were migrated, show confirmation message.
		add_action( 'all_admin_notices', array( $this, 'notify_json_migrate_status' ) );

		// Remove query arguments from the REQUEST_URI (leaves $_GET superglobal untouched).  Resolves issue #58.
		// phpcs:disable
		$_SERVER['REQUEST_URI'] = remove_query_arg( 'aadsso_reset', $_SERVER['REQUEST_URI'] );
		$_SERVER['REQUEST_URI'] = remove_query_arg( 'aadsso_migrate_from_json_status', $_SERVER['REQUEST_URI'] );
		// phpcs:enable

		// Load stored configuration values, with defaults if there's nothing set.
		$default_settings = AADSSO_Settings::get_defaults();
		$this->settings   = get_option( 'aadsso_settings', $default_settings );
		foreach ( $default_settings as $key => $default_value ) {
			if ( ! isset( $this->settings[ $key ] ) ) {
				$this->settings[ $key ] = $default_value;
			}
		}
	}

	/**
	 * Clears settings if $_GET['aadsso_nonce'] is set and if the nonce is valid.
	 */
	public function maybe_reset_settings() {
		$should_reset_settings = isset( $_GET['aadsso_nonce'] )
			// phpcs:ignore
			&& wp_verify_nonce( $_GET['aadsso_nonce'], 'aadsso_reset_settings' );

		if ( $should_reset_settings ) {
			delete_option( 'aadsso_settings' );
			wp_redirect( admin_url( 'options-general.php?page=aadsso_settings&aadsso_reset=success' ) );
		}
	}

	/**
	 * Migrates old settings (Settings.json) to the database and attempts to delete the old settings file.
	 */
	public function maybe_migrate_settings() {
		/**
		 * Settings should only be migrated if
		 * - The request came from a nonced link
		 * - The nonce action is 'aadsso_migrate_settings'
		 * - There is a legacy settings path defined
		 * - There is a file at that legacy settings path
		 */
		$should_migrate_settings = isset( $_GET['aadsso_nonce'] )
			// phpcs:ignore
			&& wp_verify_nonce( $_GET['aadsso_nonce'], 'aadsso_migrate_from_json' )
			&& defined( 'AADSSO_SETTINGS_PATH' )
			&& file_exists( AADSSO_SETTINGS_PATH );

		if ( $should_migrate_settings ) {
			// TODO: Rework the migration using WP_Filesystem.
			$legacy_settings = json_decode( file_get_contents( AADSSO_SETTINGS_PATH ), true );

			if ( null === $legacy_settings ) {
				wp_redirect( admin_url( 'options-general.php?page=aadsso_settings&aadsso_migrate_from_json_status=invalid_json' ) );
			}

			// If aad_group_to_wp_role_map is set in the legacy settings, build the inverted role_map array,
			// which is what is ultimately saved in the database.
			if ( isset( $legacy_settings['aad_group_to_wp_role_map'] ) ) {
				$legacy_settings['role_map'] = array();
				foreach ( $aad_group_to_wp_role_map as $group_id => $role_slug ) {
					if ( ! isset( $legacy_settings['role_map'][ $role_slug ] ) ) {
						$legacy_settings['role_map'][ $role_slug ] = $group_id;
					} else {
						$legacy_settings['role_map'][ $role_slug ] .= ',' . $group_id;
					}
				}
			}

			$sanitized_settings = $this->sanitize_settings( $legacy_settings );

			update_option( 'aadsso_settings', $sanitized_settings );

			if (
				// phpcs:disable
				is_writable( AADSSO_SETTINGS_PATH )
				&& is_writable( dirname( AADSSO_SETTINGS_PATH ) )
				&& unlink( AADSSO_SETTINGS_PATH )
				// phpcs:enable
			) {
				wp_safe_redirect( admin_url( 'options-general.php?page=aadsso_settings&aadsso_migrate_from_json_status=success' ) );
			} else {
				wp_safe_redirect( admin_url( 'options-general.php?page=aadsso_settings&aadsso_migrate_from_json_status=manual' ) );
			}
		}
	}

	/**
	 * Shows messages about the state of the migration operation
	 */
	public function notify_json_migrate_status() {
		if ( isset( $_GET['aadsso_migrate_from_json_status'] ) ) {
			if ( 'success' === $_GET['aadsso_migrate_from_json_status'] ) {
				echo '<div id="message" class="notice notice-success"><p>'
					// translators: This message is shown when legacy settings have been migrated successfully.
					. esc_html__( 'Legacy settings have been migrated and the old configuration file has been deleted.', 'aad-sso-wordpress' )
					. __( 'To finish migration, unset <code>AADSSO_SETTINGS_PATH</code> from <code>wp-config.php</code>. ', 'aad-sso-wordpress' )
					. '</p></div>';
			} elseif ( 'manual' === $_GET['aadsso_migrate_from_json_status'] ) {
				echo '<div id="message" class="notice notice-warning"><p>'
					. esc_html__( 'Legacy settings have been migrated successfully. ', 'aad-sso-wordpress' )
					// translators: This is telling the user that they should delete the file at %s in order to finish a migration process. %s should be wrapped in <code></code>.
					. sprintf( __( 'To finish migration, delete the file at the path <code>%s</code>. ', 'aad-sso-wordpress' ), AADSSO_SETTINGS_PATH )
					. sprintf( __( 'Then, unset <code>AADSSO_SETTINGS_PATH</code> from <code>wp-config.php</code>. ', 'aad-sso-wordpress' ) )
					. '</p></div>';
			} elseif ( 'invalid_json' === $_GET['aadsso_migrate_from_json_status'] ) {
				echo '<div id="message" class="notice notice-error"><p>'
					// translators: This message is saying that a settings file at %s could not be migrated.  %s should be wrapped in <code></code>.
					. sprintf( __( 'Legacy settings could not be migrated from <code>%s</code>. ', 'aad-sso-wordpress' ), AADSSO_SETTINGS_PATH )
					. esc_html__( 'File could not be parsed as JSON. ', 'aad-sso-wordpress' )
					. esc_html__( 'Delete the file, or check its syntax.', 'aad-sso-wordpress' )
					. '</p></div>';
			}
		}
	}

	/**
	 * Notifies user if settings reset was successful.
	 */
	public function notify_if_reset_successful() {
		if ( isset( $_GET['aadsso_reset'] ) && 'success' === $_GET['aadsso_reset'] ) {
			echo '<div id="message" class="notice notice-warning"><p>'
				. esc_html__( 'Single Sign-on with Azure Active Directory settings have been reset to default.', 'aad-sso-wordpress' )
				. '</p></div>';
		}
	}

	/**
	 * Adds the 'Azure AD' options page.
	 */
	public function add_options_page() {
		$this->options_page_id = add_options_page(
			__( 'Azure Active Directory Settings', 'aad-sso-wordpress' ), // The title for the Options page as it appears in the page's <title>.
			__( 'Azure AD', 'aad-sso-wordpress' ), // The title for the Options page as it appears in the Admin Menu.
			'manage_options', // The lowest capability capable of accessing this page.
			'aadsso_settings', // The slug to identify this options page, unique among pages, so it is namespaced `aadsso_`.
			array( $this, 'render_admin_page' ) // Function responsible for rendering the options page.
		);
	}

	/**
	 * Renders the 'Azure AD' settings page.
	 */
	public function render_admin_page() {
		require_once 'view/settings.php';
	}

	/**
	 * Registers settings, sections and fields.
	 */
	public function register_settings() {

		register_setting(
			'aadsso_settings', // The Option Group.
			'aadsso_settings', // The Option Name.
			array( $this, 'sanitize_settings' ) // The reference to the function that will sanitize the inputs.
		);

		add_settings_section(
			'aadsso_settings_general', // Settings Section ID, must be unique among sections.
			__( 'General', 'aad-sso-wordpress' ), // Settings Section Title, displayed to user.
			array( $this, 'settings_general_info' ), // Settings Section Callback, responsible for rendering the section.
			'aadsso_settings_page' // The Settings Page where the Settings Section will be displayed.
		);

		add_settings_section(
			'aadsso_settings_advanced', // Settings Section ID, must be unique among sections.
			__( 'Advanced', 'aad-sso-wordpress' ), // Settings Section Title, displayed to user.
			array( $this, 'settings_advanced_info' ), // Settings Section Callback, responsible for rendering the section.
			'aadsso_settings_page' // The Settings Page where the Settings Section will be displayed.
		);

		add_settings_field(
			'org_display_name', // Settings Field ID, must be unique among fields within the section.
			__( 'Display name', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'org_display_name_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'org_domain_hint', // Settings Field ID, must be unique among fields within the section.
			__( 'Domain hint', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'org_domain_hint_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'client_id', // Settings Field ID, must be unique among fields within the section.
			__( 'Client ID', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'client_id_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'client_secret', // Settings Field ID, must be unique among fields within the section.
			__( 'Client secret', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'client_secret_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'redirect_uri', // Settings Field ID, must be unique among fields within the section.
			__( 'Redirect URL', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'redirect_uri_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'logout_redirect_uri', // Settings Field ID, must be unique among fields within the section.
			__( 'Logout redirect URL', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'logout_redirect_uri_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'field_to_match_to_upn', // Settings Field ID, must be unique among fields within the section.
			__( 'Field to match to UPN', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'field_to_match_to_upn_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'match_on_upn_alias', // Settings Field ID, must be unique among fields within the section.
			__( 'Match on alias of the UPN', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'match_on_upn_alias_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'enable_auto_provisioning', // Settings Field ID, must be unique among fields within the section.
			__( 'Enable auto-provisioning', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'enable_auto_provisioning_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'enable_auto_forward_to_aad', // Settings Field ID, must be unique among fields within the section.
			__( 'Enable auto-forward to Azure AD', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'enable_auto_forward_to_aad_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'enable_aad_group_to_wp_role', // Settings Field ID, must be unique among fields within the section.
			__( 'Enable Azure AD group to WP role association', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'enable_aad_group_to_wp_role_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'default_wp_role', // Settings Field ID, must be unique among fields within the section.
			__( 'Default WordPress role if not in Azure AD group', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'default_wp_role_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'role_map', // Settings Field ID, must be unique among fields within the section.
			__( 'WordPress role to Azure AD group map', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'role_map_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_general' // The Settings Section where the field will be displayed.
		);

		add_settings_field(
			'openid_configuration_endpoint', // Settings Field ID, must be unique among fields within the section.
			__( 'OpenID Connect configuration endpoint', 'aad-sso-wordpress' ), // Title of the Settings Field, as it is shown to the user.
			array( $this, 'openid_configuration_endpoint_callback' ), // Settings Field Callbac, responsible for rendering the controls for the field.
			'aadsso_settings_page', // The Settings Page where the field will be displayed.
			'aadsso_settings_advanced' // The Settings Section where the field will be displayed.
		);
	}

	/**
	 * Gets the array of roles determined by other plugins to be "editable". Exists
	 * so that this plugin plays nicely with other plugins, and doesn't try to attach
	 * behaviors to roles that may not be useful or permanent.
	 */
	public function get_editable_roles() {
		global $wp_roles;
		return apply_filters( 'editable_roles', $wp_roles->roles );
	}

	/**
	 * Cleans and validates form information before saving.
	 *
	 * @param array $input key-value information to be cleaned before saving.
	 *
	 * @return array The sanitized and valid data to be stored.
	 */
	public function sanitize_settings( $input ) {

		$sanitary_values = array();

		$text_fields = array(
			'org_display_name',
			'org_domain_hint',
			'client_id',
			'client_secret',
			'redirect_uri',
			'logout_redirect_uri',
			'openid_configuration_endpoint',
		);

		foreach ( $text_fields as $text_field ) {
			if ( isset( $input[ $text_field ] ) ) {
				$sanitary_values[ $text_field ] = sanitize_text_field( $input[ $text_field ] );
			}
		}

		// Default field_to_match_to_upn is 'email'.
		$sanitary_values['field_to_match_to_upn'] = 'email';
		if (
			isset( $input['field_to_match_to_upn'] )
			&& in_array( $input['field_to_match_to_upn'], array( 'email', 'login' ), true )
		) {
			$sanitary_values['field_to_match_to_upn'] = $input['field_to_match_to_upn'];
		}

		// Default role for user that is not member of any Azure AD group is null, which denies access.
		$sanitary_values['default_wp_role'] = null;
		if ( isset( $input['default_wp_role'] ) ) {
			$sanitary_values['default_wp_role'] = sanitize_text_field( $input['default_wp_role'] );
		}

		// Booleans: when key == value, this is considered true, otherwise false.
		$boolean_settings = array(
			'enable_auto_provisioning',
			'enable_auto_forward_to_aad',
			'enable_aad_group_to_wp_role',
			'match_on_upn_alias',
		);
		foreach ( $boolean_settings as $boolean_setting ) {
			if ( isset( $input[ $boolean_setting ] ) ) {
				$sanitary_values[ $boolean_setting ] = ( $boolean_setting === $input[ $boolean_setting ] );
			} else {
				$sanitary_values[ $boolean_setting ] = false;
			}
		}

		/*
		 * Many of the roles in WordPress will not have Azure AD groups associated with them.
		 * Go over all roles, removing the mapping for empty ones.
		 */
		if ( isset( $input['role_map'] ) ) {
			foreach ( $input['role_map'] as $role_slug => $group_object_id ) {
				if ( empty( $group_object_id ) ) {
					unset( $input['role_map'][ $role_slug ] );
				}
			}
			$sanitary_values['role_map'] = $input['role_map'];
		}

		// If the OpenID Connect configuration endpoint is changed, clear the cached values.
		$stored_oidc_config_endpoint = isset( $this->settings['openid_configuration_endpoint'] )
			? $this->settings['openid_configuration_endpoint'] : null;
		if ( $stored_oidc_config_endpoint !== $sanitary_values['openid_configuration_endpoint'] ) {
			delete_transient( 'aadsso_openid_configuration' );
			AADSSO::debug_log( 'Setting \'openid_configuration_endpoint\' changed, cleared cached OpenID Connect values.' );
		}

		return $sanitary_values;
	}

	/**
	 * Renders details for the General settings section.
	 */
	public function settings_general_info() { }

	/**
	 * Renders details for the Advanced settings section.
	 */
	public function settings_advanced_info() { }

	/**
	 * Renders the `role_map` picker control.
	 *
	 * @access public
	 */
	public function role_map_callback() {
		printf(
			'<p>%s</p>',
			esc_html__( 'Map WordPress roles to Azure Active Directory groups.', 'aad-sso-wordpress' )
		);
		echo '<table>';
		printf(
			'<thead><tr><th>%1$s</th><th>%2$s</th></tr></thead>',
			esc_html__( 'WordPress Role', 'aad-sso-wordpress' ),
			esc_html__( 'Azure AD Group Object ID', 'aad-sso-wordpress' )
		);
		echo '<tbody>';
		foreach ( $this->get_editable_roles() as $role_slug => $role ) {
			echo '<tr>';
				echo '<td>' . esc_html( $role['name'] ) . '</td>';
				echo '<td>';
					printf(
						'<input type="text" class="regular-text" name="aadsso_settings[role_map][%1$s]" '
							. 'id="role_map_%1$s" value="%2$s" />',
						esc_attr( $role_slug ),
						isset( $this->settings['role_map'][ $role_slug ] )
							? esc_attr( $this->settings['role_map'][ $role_slug ] )
							: ''
					);
				echo '</td>';
			echo '</tr>';
		}
		echo '</tbody>';
		echo '</table>';
	}

	/**
	 * Renders the `org_display_name` form control.
	 */
	public function org_display_name_callback() {
		$this->render_text_field( 'org_display_name' );
		printf(
			'<p class="description">%s</p>',
			esc_html__( 'Display Name will be shown on the WordPress login screen.', 'aad-sso-wordpress' )
		);
	}

	/**
	 * Renders the `org_domain_hint` form control.
	 */
	public function org_domain_hint_callback() {
		$this->render_text_field( 'org_domain_hint' );
		printf(
			'<p class="description">%s</p>',
			esc_html__(
				'Provides a hint to Azure AD about the domain or tenant they will be logging in to. If '
				. 'the domain is federated, the user will be automatically redirected to federation '
				. 'endpoint.',
				'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `client_id` form control
	 */
	public function client_id_callback() {
		$this->render_text_field( 'client_id' );
		printf(
			'<p class="description">%s</p>',
			esc_html__( 'The client ID of the Azure AD application representing this blog.', 'aad-sso-wordpress' )
		);
	}

	/**
	 * Renders the `client_secret` form control
	 **/
	public function client_secret_callback() {
		$this->render_text_field( 'client_secret' );
		printf(
			'<p class="description">%s</p>',
			esc_html__( 'A secret key for the Azure AD application representing this blog.', 'aad-sso-wordpress' )
		);
	}

	/**
	 * Renders the `redirect_uri` form control
	 **/
	public function redirect_uri_callback() {
		$this->render_text_field( 'redirect_uri' );
		printf(
			' <a href="#" onclick="jQuery(\'#redirect_uri\').val(\'%1$s\'); return false;">%2$s</a>'
			. '<p class="description">%3$s</p>',
			esc_attr( wp_login_url() ),
			esc_html__( 'Set default', 'aad-sso-wordpress' ),
			esc_html__(
				'The URL where the user is redirected to after authenticating with Azure AD. '
				. 'This URL must be registered in Azure AD as a valid redirect URL, and it must be a '
				. 'page that invokes the "authenticate" filter. If you don\'t know what to set, leave '
				. 'the default value (which is this blog\'s login page).', 'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `logout_redirect_uri` form control
	 **/
	public function logout_redirect_uri_callback() {
		$this->render_text_field( 'logout_redirect_uri' );
		printf(
			' <a href="#" onclick="jQuery(\'#logout_redirect_uri\').val(\'%1$s\'); return false;">%2$s</a>'
			. '<p class="description">%3$s</p>',
			esc_attr( wp_login_url() ),
			esc_html__( 'Set default', 'aad-sso-wordpress' ),
			esc_html__(
				'The URL where the user is redirected to after signing out of Azure AD. '
				. 'This URL must be registered in Azure AD as a valid redirect URL. (This does not affect '
				. ' logging out of the blog, it is only used when logging out of Azure AD.)', 'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `field_to_match_to_upn` form control.
	 */
	public function field_to_match_to_upn_callback() {
		$selected = isset( $this->settings['field_to_match_to_upn'] )
			? $this->settings['field_to_match_to_upn']
			: '';
		?>
		<select name="aadsso_settings[field_to_match_to_upn]" id="field_to_match_to_upn">
			<option value="email"<?php echo 'email' === $selected ? ' selected="selected"' : ''; ?>>
				<?php esc_html_e( 'Email Address', 'aad-sso-wordpress' ); ?>
			</option>
			<option value="login"<?php echo 'login' === $selected ? ' selected="selected"' : ''; ?>>
				<?php esc_html_e( 'Login Name', 'aad-sso-wordpress' ); ?>
			</option>
		</select>
		<?php
		printf(
			'<p class="description">%s</p>',
			esc_html__(
				'This specifies the WordPress user field which will be used to match to the Azure AD user\'s '
					. 'UserPrincipalName.', 'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `match_on_upn_alias` checkbox control.
	 */
	public function match_on_upn_alias_callback() {
		$this->render_checkbox_field(
			'match_on_upn_alias',
			__(
				'Match WordPress users based on the alias of their Azure AD UserPrincipalName. For example, '
				. 'Azure AD username <code>bob@example.com</code> will match WordPress user <code>bob</code>.',
				'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `default_wp_role` control.
	 */
	public function default_wp_role_callback() {

		// Default configuration should be most-benign.
		if ( ! isset( $this->settings['default_wp_role'] ) ) {
			$this->settings['default_wp_role'] = '';
		}

		echo '<select name="aadsso_settings[default_wp_role]" id="default_wp_role">';
		printf( '<option value="%s">%s</option>', '', '(None, deny access)' );
		foreach ( $this->get_editable_roles() as $role_slug => $role ) {
			$selected = $this->settings['default_wp_role'] === $role_slug
				? ' selected="selected"'
				: '';
			printf(
				'<option value="%s"%s>%s</option>',
				esc_attr( $role_slug ),
				// phpcs:ignore
				$selected,
				esc_html( $role['name'] )
			);
		}
		echo '</select>';
		printf(
			'<p class="description">%s</p>',
			esc_html__(
				'This is the default role that users will be assigned to if matching Azure AD group to '
				. 'WordPress roles is enabled, but the signed in user isn\'t a member of any of the '
				. 'configured Azure AD groups.', 'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `enable_auto_provisioning` checkbox control.
	 */
	public function enable_auto_provisioning_callback() {
		$this->render_checkbox_field(
			'enable_auto_provisioning',
			__(
				'Automatically create WordPress users, if needed, for authenticated Azure AD users.',
				'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `enable_auto_forward_to_aad` checkbox control.
	 */
	public function enable_auto_forward_to_aad_callback() {
		$this->render_checkbox_field(
			'enable_auto_forward_to_aad',
			__(
				'Automatically forward users to the Azure AD to sign in, skipping the WordPress login screen.',
				'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `enable_aad_group_to_wp_role` checkbox control.
	 */
	public function enable_aad_group_to_wp_role_callback() {
		$this->render_checkbox_field(
			'enable_aad_group_to_wp_role',
			__(
				'Automatically assign WordPress user roles based on Azure AD group membership.',
				'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders the `openid_configuration_endpoint` form control
	 **/
	public function openid_configuration_endpoint_callback() {
		$this->render_text_field( 'openid_configuration_endpoint' );
		printf(
			' <a href="#" onclick="jQuery(\'#openid_configuration_endpoint\').val(\'%1$s\'); return false;">%2$s</a>'
			. '<p class="description">%3$s</p>',
			esc_attr( AADSSO_Settings::get_defaults( 'openid_configuration_endpoint' ) ),
			esc_html( 'Set default', 'aad-sso-wordpress' ),
			esc_html(
				'The OpenID Connect configuration endpoint to use. To support Microsoft Accounts and external '
				. 'users (users invited in from other Azure AD directories, known sometimes as "B2B users") you '
				. 'must use: <code>https://login.microsoftonline.com/{tenant-id}/.well-known/openid-configuration</code>, '
				. 'where <code>{tenant-id}</code> is the tenant ID or a verified domain name of your directory.',
				'aad-sso-wordpress'
			)
		);
	}

	/**
	 * Renders a simple text field and populates it with the setting value.
	 *
	 * @param string $name The setting name for the text input field.
	 */
	public function render_text_field( $name ) {
		$value = isset( $this->settings[ $name ] )
			? $this->settings[ $name ]
			: '';
		printf(
			'<input class="regular-text" type="text" '
				. 'name="aadsso_settings[%1$s]" id="%1$s" value="%2$s" />',
			esc_attr( $name ),
			esc_attr( $value )
		);
	}

	/**
	 * Renders a simple checkbox field and populates it with the setting value.
	 *
	 * @param string $name The setting name for the checkbox input field.
	 * @param string $label The label to use for the checkbox.
	 */
	public function render_checkbox_field( $name, $label ) {
		printf(
			'<input type="checkbox" name="aadsso_settings[%1$s]" id="%1$s" value="%1$s"%2$s />'
				. '<label for="%1$s">%3$s</label>',
			esc_attr( $name ),
			isset( $this->settings[ $name ] ) && $this->settings[ $name ] ? 'checked' : '',
			esc_html( $label )
		);
	}

	/**
	 * Indicates if user is currently on this settings page.
	 */
	public function is_on_options_page() {
		$screen = get_current_screen();
		return $screen->id === $this->options_page_id;
	}

	/**
	 * Ensures jQuery is loaded
	 */
	public function maybe_include_jquery() {
		if ( $this->is_on_options_page() ) {
			wp_enqueue_script( 'jquery' );
		}
	}
}
